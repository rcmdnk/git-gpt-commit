#!/usr/bin/env bash

_VERSION="0.0.14"

_MODEL="gpt-4o"
_ENDPOINT=""
_ENDPOINT_OPENAI="https://api.openai.com/v1/chat/completions"
_ENDPOINT_DEEPSEEK="https://api.deepseek.com/v1/chat/completions"
_ENDPOINT_OLLAMA="http://localhost:11434/v1/chat/completions"
_KEY_NAME=""
_KEY_NAME_OPENAI="OPENAI_API_KEY"
_KEY_NAME_DEEPSEEK="DEEPSEEK_API_KEY"


_PROMPT="You will be provided with git diff output. Based on the provided diff, create concise and clear git commit messages.

Each commit message must:
- Be written on one line.
- Start with one of the following prefixes, depending on the type of change:
  - feat: (introducing a new feature or functionality visible to the user)
  - fix: (fixing a bug or issue that affects users)
  - docs: (updating or improving documentation only)
  - style: (non-functional changes like code formatting, removing extra spaces, etc.)
  - refactor: (modifying existing code without changing its behavior, e.g., renaming variables, restructuring code)
  - test: (adding or updating tests without changing production code)
  - chore: (updates to build tools, configurations, or non-production-related changes)

Rules for output:
1. Only output plain commit messages with no additional comments, bullet points, or formatting.
2. Summarize changes into as few lines as possible, ideally within 3 lines.
3. Group related changes under the same category when possible.
4. Separate categories only if they address distinct types of changes.

Example output format:
feat: add get_name function to get user name
test: add test for get_name

"

_EXCLUDE="*.lock"

_MESSAGE=""

conf=${XDG_CONFIG_HOME:-$HOME/.config}/git_gpt_commit/config
template=$(git config --get commit.template)
template="${template/#\~/$HOME}"
topdir=$(git rev-parse --show-toplevel)
program=$(basename "$0")

if [ "$1" = "-v" ] || [ "$1" = "--version" ]; then
  echo "$program" "$_VERSION"
  exit
fi

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Usage: git gpt-commit [options] [--] [<pathspec>...]

Options are the same as git commit.
In addition, [-c | --change] option is available to tell contents of changes to $program.

You can change PROMPT, EXCLUDE, and MESSAGE by editing \${XDG_CONFIG_HOME:-\$HOME/.config}/git_gpt_commit/config.
PROMPT is a prompt message how to make a commit message from git diff.
EXCLUDE is a regex to exclude files from git diff. Multiple regexes can be separated by ','.
TEMPLATE will be shown under the commit message as a comment.

Default values are:
    # ChatGPT model. $_MODEL is used if not defined.
    MODEL=\"$_MODEL\"

    # API Endpoint. If not defined (or empty), use $_ENDPOINT_OPENAI ($_ENDPOINT_DEEPSEEK) for OpenAI (DeepSeek) models, or $_ENDPOINT_OLLAMA (Ollama local server) for others.
    ENDPOINT=\"$_ENDPOINT\"

    # API Key name in environment variable. If not defined (or empty), use $_KEY_NAME_OPENAI ($_KEY_NAME_DEEPSEEK) for OpenAI (DeepSeek) models.
    KEY_NAME=\"$_KEY_NAME\"

    # Prompt to make commit messages from git diff.
    PROMPT=\"$_PROMPT\"

    # Regex to exclude files from git diff. Multiple regexes can be separated by ','.
    EXCLUDE=\"$_EXCLUDE\"

    # Commit message template. If empty, use content of \$(git config --get commit.template) if exists.
    # If not defined, use content of \$(git config --get commit.template) if exists. Set 'MESSAGE=\"\"' to drop the message.
    MESSAGE # Not defined.
"
  exit
fi

if ! type git >/dev/null 2>&1; then
  echo "git command not found. Please install git command."
  exit 1
fi

if [ -f "$conf" ]; then
  # shellcheck disable=SC1090
  source "$conf"
fi

MODEL="${MODEL:-$_MODEL}"
ENDPOINT="${ENDPOINT:-$_ENDPOINT}"
KEY_NAME="${KEY_NAME:-$_KEY_NAME}"


if [[ "$MODEL" =~ ^gpt* ]] || [[ "$MODEL" =~ ^chatgpt* ]] || [[ "$MODEL" =~ ^o1-* ]]; then
  ENDPOINT="${ENDPOINT:-$_ENDPOINT_OPENAI}"
  KEY_NAME="${KEY_NAME:-$_KEY_NAME_OPENAI}"
elif [[ "$MODEL" =~ ^deepseek* ]]; then
  ENDPOINT="${ENDPOINT:-$_ENDPOINT_DEEPSEEK}"
  KEY_NAME="${KEY_NAME:-$_KEY_NAME_DEEPSEEK}"
else
  ENDPOINT="${ENDPOINT:-$_ENDPOINT_OLLAMA}"
fi

if [ -z "$ENDPOINT" ]; then
  echo "ENDPOINT is needed to be set for $MODEL model."
  exit 1
fi

key=""
if [ -z "$KEY_NAME" ]; then
  if [ "$ENDPOINT" = "$_ENDPOINT_OPENAI" ] || [ "$ENDPOINT" = "$_ENDPOINT_DEEPSEEK" ]; then
    echo "KEY_NAME is needed to be set for $MODEL model."
    exit 1
  fi
else
  key="${!KEY_NAME}"
  if [ -z "$key" ]; then
    echo "$KEY_NAME is not set. Please set $KEY_NAME environment variable."
    exit 1
  fi
fi

PROMPT="${PROMPT:-$_PROMPT}"
EXCLUDE="${EXCLUD-$_EXCLUDE}"
if [ -z "$MESSAGE" ] && [ -n "$template" ] && [ -f "$template" ];then
  MESSAGE="${MESSAGE-$(cat "$template")}"
fi

exclude_list=""
if [ -n "$EXCLUDE" ];then
  for exclude in $(echo "$EXCLUDE" | tr ',' ' ');do
    exclude_list="$exclude_list :(exclude)$topdir/$exclude"
  done
  exclude_list="-- $exclude_list"
fi


if echo " $* " | grep -q " -a ";then
  modified=$(git status --porcelain | grep " M"|awk '{print $2}')
  git add -u
fi

change=""
if echo " $* " | grep -q -e " -c " -e " --change ";then
  is_change=0
  for v;do
    shift
    if [ "$v" = "-c" ] || [ "$v" = "--change" ];then
      is_change=1
      continue
    fi
    if [ "$is_change" -eq 1 ];then
      change="This commit is for: $v"$'\n'
      is_change=0
      continue
    fi
    set -- "$@" "$v"
  done
fi

restore () {
  if [ -n "$modified" ];then
    for f in $modified;do
      git restore --staged "$topdir/$f"
    done
  fi
}

if ! git status | grep -q "Changes to be committed";then
  git commit
  exit
fi

if ! echo " $* " | grep -q -e " -n " -e " --no-verify ";then
  git hook run --ignore-missing pre-commit
  ret=$?
  if [ $ret -ne 0 ]; then
    restore
    exit $ret
  fi
fi

# shellcheck disable=SC2086
content="$change$PROMPT

### git diff

$(git diff --cached $exclude_list)"

content=${content//\\/\\\\}
content=${content//\t/\\t}
content=${content//\"/\\\"}
content=${content//$'\n'/\\\\n}

input_json='{"model": "'$MODEL'", "messages": [{"role": "user", "content": "'"$content"'"}]}'

json=$(curl -s "$ENDPOINT" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $key" \
  -d "$input_json")

commit_message=$(echo "$json"|sed -n 's/.*"content":[[:space:]]*"\([^"]*\)".*/\1/p')
commit_message=${commit_message//\\n/$'\n'}
if [ -z "$commit_message" ];then
  message=$(echo "$json"|sed -n 's/.*"message":[[:space:]]*"\([^"]*\)".*/\1/p')
  message=${message//\\n/$'\n'}
  echo "Failed to get a response from the API (ENDPOINT=$ENDPOINT, MODEL=$MODEL)."
  echo ""
  echo "$message"
  exit 1
fi

git commit --no-verify -e -m "$commit_message" "$@"
ret=$?
if [ $ret -ne 0 ]; then
  restore
fi
exit $ret
