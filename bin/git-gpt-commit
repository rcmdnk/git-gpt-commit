#!/usr/bin/env bash

_VERSION="0.0.6"

_MODEL=""
_PROMPT="You will be provided git diff output.
Make git commit messages for the diff ouput.

Each commit message must be one line starting with one of the following words.

* feat: (new feature for the user, not a new feature for build script)
* fix: (bug fix for the user, not a fix to a build script)
* docs: (changes to the documentation)
* style: (formatting, missing semi colons, etc; no production code change)
* refactor: (refactoring production code, eg. renaming a variable)
* test: (adding missing tests, refactoring tests; no production code change)
* chore: (updating grunt tasks etc; no production code change)

Write only the commit message, not a comment.

"

_EXCLUDE="*.lock"

_MESSAGE=""

conf=${XDG_CONFIG_HOME:-$HOME/.config}/git_gpt_commit/config
template=$(git config --get commit.template)
template="${template/#\~/$HOME}"
topdir=$(git rev-parse --show-toplevel)
program=$(basename "$0")

if [ "$1" = "-v" ] || [ "$1" = "--version" ]; then
  echo "$program" "$_VERSION"
  exit
fi

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Usage: git gpt-commit [options] [--] [<pathspec>...]

Options are the same as git commit.
In addition, [-c | --change] option is available to tell contents of changes to $program.

You can change PROMPT, EXCLUDE, and MESSAGE by editing \${XDG_CONFIG_HOME:-\$HOME/.config}/git_gpt_commit/config.
PROMPT is a prompt message how to make a commit message from git diff.
EXCLUDE is a regex to exclude files from git diff. Multiple regexes can be separated by ','.
TEMPLATE will be shown under the commit message as a comment.

Default values are:
    # ChatGPT model. If empty, cg's default value is used.
    MODEL=\"$_MODEL\"

    # Prompt to make commit messages from git diff.
    PROMPT=\"$_PROMPT\"

    # Regex to exclude files from git diff. Multiple regexes can be separated by ','.
    EXCLUDE=\"$_EXCLUDE\"

    # Commit message template. If empty, use content of \$(git config --get commit.template) if exists.
    # If not defined, use content of \$(git config --get commit.template) if exists. Set 'MESSAGE=\"\"' to drop the message.
    MESSAGE # Not defined.
"
  exit
fi

if ! type git >/dev/null 2>&1; then
  echo "git command not found. Please install git command."
  exit 1
fi

if ! type cg >/dev/null 2>&1; then
  echo "cg command not found. Please install cg command by Homebrew or Pip.
    $ brew install chatgpt-prompt-wrapper
or
    $ pip install chatgpt-prompt-wrapper"
  exit 1
fi

if [ -z "$OPENAI_API_KEY" ]; then
  echo "OPENAI_API_KEY is not set. Please set OPENAI_API_KEY environment variable."
  exit 1
fi

if echo " $* " | grep -q " -a ";then
  modified=$(git status --porcelain | grep " M"|awk '{print $2}')
  git add -u
fi

change=""
if echo " $* " | grep -q -e " -c " -e " --change ";then
  is_change=0
  for v;do
    shift
    if [ "$v" = "-c" ] || [ "$v" = "--change" ];then
      is_change=1
      continue
    fi
    if [ "$is_change" -eq 1 ];then
      change="This commit is for: $v"$'\n'
      is_change=0
      continue
    fi
    set -- "$@" "$v"
  done
fi

function restore {
  if [ -n "$modified" ];then
    for f in $modified;do
      git restore --staged "$topdir/$f"
    done
  fi
}

if ! git status | grep -q "Changes to be committed";then
  git commit
  exit
fi

if ! echo " $* " | grep -q -e " -n " -e " --no-verify ";then
  git hook run --ignore-missing pre-commit
  ret=$?
  if [ $ret -ne 0 ]; then
    restore
    exit $ret
  fi
fi

if [ -f "$conf" ]; then
  # shellcheck disable=SC1090
  source "$conf"
fi

MODEL="${MODEL:-$_MODEL}"
MODEL="${MODEL:+-m $MODEL}"
PROMPT="${PROMPT:-$_PROMPT}"
EXCLUDE="${EXCLUD-$_EXCLUDE}"
if [ -z "$MESSAGE" ] && [ -n "$template" ] && [ -f "$template" ];then
  MESSAGE="${MESSAGE-$(cat "$template")}"
fi

exclude_list=""
if [ -n "$EXCLUDE" ];then
  for exclude in $(echo "$EXCLUDE" | tr ',' ' ');do
    exclude_list="$exclude_list :(exclude)$topdir/$exclude"
  done
  exclude_list="-- $exclude_list"
fi

# shellcheck disable=SC2086
commit_message="$(cg ask $MODEL "${change}$PROMPT

### diff

$(git diff --cached $exclude_list)
")

$MESSAGE"

tmp_file=$(mktemp)
git commit --no-verify -e -m "$commit_message" "$@" 2> "$tmp_file"
ret=$?
cat "$tmp_file" 1>&2
if grep -q "Aborting commit due to empty commit message." "$tmp_file";then
  restore
fi
rm -f "$tmp_file"
exit $ret
